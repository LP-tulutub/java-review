package com.java.review.springboot;

public class SpringBootTest {
}

/**
 * 1.Spring Boot有哪些优点？
 *  减少开发，测试时间
 *  使用JavaConfig有助于避免使用XML
 *  避免大量的Maven导入和各种版本冲突
 *  没有单独的Web服务器需要，不需要Tomcat
 *  添加用@Configuration注释的类，然后添加用@Bean注释的方法，Spring将自动加载对象并像以前一样对其进行管理
 *  环境的配置更容易
 * 2.如何重新加载SpringBoot上的更改，而无需重新启动服务器？
 *  这可以使用DEV工具来实现
 * 3.常见的系统架构风格有哪些？各有什么优缺点？
 *  单体架构：
 *      项目易于管理
 *      部署简单
 *      测试成本高
 *      可伸缩性差
 *      可靠性差
 *      迭代困难
 *      跨语言程度差
 *      团队协作难
 *  MVC架构：
 *      各施其职，互不干涉
 *      有利于开发中的分工
 *      有利于组件的重用
 *      增加了系统结构和实现的复杂性
 *      视图与控制器间的过于紧密的连接
 *      视图对模型数据的低效率访问
 *  面向服务架构(SOA)：
 *      测试容易
 *      可伸缩性强
 *      可靠性强
 *      跨语言程度会更加灵活
 *      团队协作容易
 *      系统迭代容易
 *      运维成本过高，部署数量较多
 *      接口兼容多版本
 *      分布式系统的复杂性
 *      分布式事务
 * 4.什么是AKF拆分原则？
 *  通过加机器就可以解决容量和可用性问题
 *  Y轴扩展会将庞大的整体应用拆分为多个服务
 *  X轴扩展通过绝对平等地复制服务与数据，以解决容量和可用性的问题
 *  Z轴扩展基于请求者或用户独特的需求，进行系统划分
 * 5.什么是SpringCloud？
 *  Spring Cloud是一个微服务框架
 *  Spring Cloud提供的全套的分布式系统解决方案
 * 6.Spring Cloud与Dubbo的区别是什么？
 * 7.什么是Eureka注册中心？
 *  Eureka本身是一个基于REST的服务
 *  Spring Cloud将它集成在其子项目spring-cloud-netflix中
 *  提供负载均衡、故障转移等能力
 * 8.简单谈一下Eureka中的三种角色分别是什么？
 *  Eureka Server、Application Service (Service Provider)、Application Client (Service Consumer)
 * 9.什么是Ribbon？
 *  Ribbon 是一个基于Http和TCP的客服端负载均衡工具，它是基于Netflix Ribbon实现的
 *  它不像spring cloud服务注册中心、配置中心、API网关那样独立部署，但是它几乎存在于每个spring cloud 微服务中
 *  Ribbon默认提供很多种负载均衡算法
 * 10.集中式与进程内负载均衡的区别？
 *  集中式负载均衡, 即在consumer和provider之间使用独立的负载均衡设施(可以是硬件，如F5, 也可以是软件，如nginx), 由该设施负责把访问请求通过某种策略转发至provider
 *  进程内负载均衡，将负载均衡逻辑集成到consumer，consumer从服务注册中心获知有哪些地址可用，然后自己再从这些地址中选择出一个合适的provider
 * 11.Ribbon的常见负载均衡策略有哪些？
 * 12.简单说说什么是Feign？
 *  Feign是一种声明式、模板化的HTTP客户端技术(仅在consumer中使用)
 * 13.什么是声明式，有什么作用，解决什么问题？
 *  SpringCloud的声明式调用, 可以做到使用HTTP请求远程服务时能就像调用本地方法一样的体验，开发者完全感知不到这是远程方法，更感知不到这是个HTTP请求
 *  它像Dubbo一样，consumer直接调用接口方法调用provider，而不需要通过常规的Http Client构造请求再解析返回数据
 *  它解决了让开发者调用远程接口就跟调用本地方法一样，无需关注与远程的交互细节，更无需关注分布式环境开发
 * 14.什么是服务的灾难性的雪崩效应？
 *  在微服务架构中，一个请求需要调用多个服务是非常常见的
 *  客户端访问A服务，而A服务需要调用B服务，B服务需要调用C服务
 *  由于网络原因或者自身的原因，如果B服务或者C服务不能及时响应，A服务将处于阻塞状态，直到B服务C服务响应
 *  此时若有大量的请求涌入，容器的线程资源会被消耗完毕，导致服务瘫痪
 *  服务与服务之间的依赖性，故障会传播，造成连锁反应，会对整个微服务系统造成灾难性的严重后果，这就是服务故障的“雪崩”效应
 * 15.如何解决灾难性雪崩效应？
 *  降级、隔离（线程池隔离和信号量隔离）、熔断、缓存、请求合并
 * 16.线程池隔离和信号量隔离的区别？
 * 17.微服务架构的六种常用设计模式是什么？
 *  代理设计模式、聚合设计模式、链条设计模式、聚合链条设计模式、数据共享设计模式、异步消息设计模式
 * 18.什么是网关服务？
 *  网关服务，通常是外部访问服务的唯一接口，访问内部的所有服务都必须先经过网关服务
 *  网关服务的主要功能是消息解析过滤，路由，转发等
 * 19.网关服务中，路由器的4种路由规则方法是什么？
 *  采用URL指定路由方式
 *  采用服务名称指定路由方式
 *  路由的排除方法
 *  路由的添加前缀方法
 * 20.为什么要使用spring cloud config 配置中心？它解决了什么问题？
 * 21.什么是Spring Cloud Bus？
 * 22.消息驱动Stream解决了什么问题？
 * 23.为什么要使用微服务跟踪？它解决了什么问题？
 * 24.什么是ELK（ElasticSearch, Logstash, Kibana）
 *  ELK是三个工具的集合，Elasticsearch + Logstash + Kibana，这三个工具组合形成了一套实用、易用的监控架构，很多公司利用它来搭建可视化的海量日志分析平台
 *  ElasticSearch是一个基于Lucene的搜索服务器
 *  Logstash是一个用于管理日志和事件的工具
 *  Kibana是一个优秀的前端日志展示框架，它可以非常详细的将日志转化为各种图表，为用户提供强大的数据可视化支持
 * 25.为什么要用ELK，它解决了什么问题？
 * 26.什么是分布式跟踪 : Zipkin？
 */
















































